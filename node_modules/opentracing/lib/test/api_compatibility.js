"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../index");
/**
 * A function that takes a tracer factory, and tests wheter the initialized tracer
 * fulfills Opentracing's api requirements.
 *
 * @param {object} createTracer - a factory function that allocates a tracer.
 * @param {object} [options] - the options to be set on api compatibility
 */
function apiCompatibilityChecks(createTracer, options) {
    var _this = this;
    if (createTracer === void 0) { createTracer = function () { return new index_1.Tracer(); }; }
    if (options === void 0) { options = { skipBaggageChecks: false, skipInjectExtractChecks: false }; }
    describe('OpenTracing API Compatibility', function () {
        var tracer;
        var span;
        beforeEach(function () {
            tracer = createTracer();
            span = tracer.startSpan('test-span');
        });
        describe('Tracer', function () {
            describe('activeSpan', function () {
                it('should get active span', function () {
                    chai_1.expect(tracer.activeSpan()).to.be.null;
                });
            });
            describe('startSpan', function () {
                it('should handle Spans and SpanContexts', function () {
                    chai_1.expect(function () { tracer.startSpan('child', { childOf: span }); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.startSpan('child', { childOf: span.context() }); }).to.not.throw(Error);
                });
            });
            describe('inject', function () {
                (options.skipInjectExtractChecks ? it.skip : it)('should not throw exception on required carrier types', function () {
                    var spanContext = span.context();
                    var textCarrier = {};
                    var binCarrier = new index_1.BinaryCarrier([1, 2, 3]);
                    chai_1.expect(function () { tracer.inject(spanContext, index_1.FORMAT_TEXT_MAP, textCarrier); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.inject(spanContext, index_1.FORMAT_BINARY, binCarrier); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.inject(spanContext, index_1.FORMAT_BINARY, {}); }).to.not.throw(Error);
                });
                (options.skipInjectExtractChecks ? it.skip : it)('should handle Spans and SpanContexts', function () {
                    var textCarrier = {};
                    chai_1.expect(function () { tracer.inject(span, index_1.FORMAT_TEXT_MAP, textCarrier); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.inject(span.context(), index_1.FORMAT_TEXT_MAP, textCarrier); }).to.not.throw(Error);
                });
            });
            describe('extract', function () {
                (options.skipInjectExtractChecks ? it.skip : it)('should not throw exception on required carrier types', function () {
                    var textCarrier = {};
                    var binCarrier = new index_1.BinaryCarrier([1, 2, 3]);
                    chai_1.expect(function () { tracer.extract(index_1.FORMAT_TEXT_MAP, textCarrier); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.extract(index_1.FORMAT_BINARY, binCarrier); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.extract(index_1.FORMAT_BINARY, {}); }).to.not.throw(Error);
                    chai_1.expect(function () { tracer.extract(index_1.FORMAT_BINARY, { buffer: null }); }).to.not.throw(Error);
                });
            });
            describe('runSpan', function () {
                it('should return the result', function () {
                    chai_1.expect(tracer.runSpan('test', {}, function () { return 1; })).to.equal(1);
                });
            });
            describe('runSpanAsync', function () {
                it('should return the result', function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = chai_1.expect;
                                return [4 /*yield*/, tracer.runSpanAsync('test', {}, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                        return [2 /*return*/, 1];
                                    }); }); })];
                            case 1:
                                _a.apply(void 0, [_b.sent()]).to.equal(1);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe('spanManager', function () {
                it('should get SpanManager', function () {
                    chai_1.expect(tracer.spanManager()).to.not.be.null;
                });
            });
        });
        describe('Span', function () {
            (options.skipBaggageChecks ? it.skip : it)('should set baggage and retrieve baggage', function () {
                span.setBaggageItem('some-key', 'some-value');
                var val = span.getBaggageItem('some-key');
                chai_1.assert.equal('some-value', val);
            });
            describe('finish', function () {
                it('should not throw exceptions on valid arguments', function () {
                    span = tracer.startSpan('test-span');
                    chai_1.expect(function () { return span.finish(Date.now()); }).to.not.throw(Error);
                });
            });
        });
        describe('Reference', function () {
            it('should handle Spans and span.context()', function () {
                chai_1.expect(function () { return new index_1.Reference(index_1.REFERENCE_CHILD_OF, span); }).to.not.throw(Error);
                chai_1.expect(function () { return new index_1.Reference(index_1.REFERENCE_CHILD_OF, span.context()); }).to.not.throw(Error);
            });
        });
    });
}
exports.default = apiCompatibilityChecks;
//# sourceMappingURL=api_compatibility.js.map