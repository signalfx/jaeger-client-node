"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_hooks_1 = require("async_hooks");
/**
 * ScopeManger using Node.js {@link async_hooks|https://nodejs.org/api/async_hooks.html}
 */
var AsyncHookSpanManager = /** @class */ (function () {
    function AsyncHookSpanManager() {
        var _this = this;
        this._spans = new Map();
        this._hook = async_hooks_1.createHook({
            after: function (asyncId) {
                if (_this._spans.delete(asyncId) && !_this._spans.size) {
                    _this._hook.disable();
                }
            },
            init: function (asyncId, type, triggerAsyncId) {
                var span = _this._spans.get(triggerAsyncId);
                if (span) {
                    _this._spans.set(asyncId, span);
                }
            }
        });
    }
    AsyncHookSpanManager.prototype.active = function () {
        return this._spans.get(async_hooks_1.executionAsyncId()) || null;
    };
    AsyncHookSpanManager.prototype.activate = function (span, f) {
        var asyncId = async_hooks_1.executionAsyncId();
        var oldSpan = this._spans.get(asyncId);
        if (span) {
            if (!this._spans.size) {
                this._hook.enable();
            }
            this._spans.set(asyncId, span);
        }
        try {
            return f();
        }
        finally {
            if (oldSpan) {
                this._spans.set(asyncId, oldSpan);
            }
            else {
                this._spans.delete(asyncId);
            }
        }
    };
    return AsyncHookSpanManager;
}());
exports.AsyncHookSpanManager = AsyncHookSpanManager;
//# sourceMappingURL=async_hook_span_manager.js.map