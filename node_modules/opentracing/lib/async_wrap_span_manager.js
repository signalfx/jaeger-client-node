"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var asyncHookJl = require('async-hook-jl');
asyncHookJl.enable();
var currentId = 1;
asyncHookJl.addHooks({
    pre: function (id) { return currentId = id; },
    post: function () { return currentId = null; } // in case of bugs
});
/**
 * ScopeManger using Node.js {@link async_hooks|https://nodejs.org/api/async_hooks.html}
 */
var AsyncWrapSpanManager = /** @class */ (function () {
    function AsyncWrapSpanManager() {
        var _this = this;
        this._hook = {
            post: function (id) {
                if (_this._spans.delete(id) && !_this._spans.size) {
                    asyncHookJl.removeHooks(_this._hook);
                }
            },
            init: function (id, handle, provider, parentId) {
                // async-hook-jl patches have parentId = 0
                var span = _this._spans.get(parentId || currentId);
                if (span) {
                    _this._spans.set(id, span);
                }
            }
        };
        this._spans = new Map();
    }
    AsyncWrapSpanManager.prototype.active = function () {
        return this._spans.get(currentId) || null;
    };
    AsyncWrapSpanManager.prototype.activate = function (span, f) {
        var oldSpan = this._spans.get(currentId);
        if (span) {
            if (!this._spans.size) {
                asyncHookJl.addHooks(this._hook);
            }
            this._spans.set(currentId, span);
        }
        try {
            return f();
        }
        finally {
            if (oldSpan) {
                this._spans.set(currentId, oldSpan);
            }
            else {
                this._spans.delete(currentId);
            }
        }
    };
    return AsyncWrapSpanManager;
}());
exports.AsyncWrapSpanManager = AsyncWrapSpanManager;
//# sourceMappingURL=async_wrap_span_manager.js.map