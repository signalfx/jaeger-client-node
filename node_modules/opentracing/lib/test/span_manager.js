"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var fs = require("fs");
var opentracing = require("..");
function spanManagerTests(spanManagerFactory) {
    var _this = this;
    describe('activate()', function () {
        it('should persist through setTimeout', function () { return __awaiter(_this, void 0, void 0, function () {
            var spanManager, span, spanPromise, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        spanManager = spanManagerFactory();
                        chai_1.expect(spanManager.active()).to.be.null;
                        span = new opentracing.Span();
                        spanPromise = spanManager.activate(span, function () {
                            chai_1.expect(spanManager.active()).to.equal(span);
                            return new Promise(function (resolve) {
                                setTimeout(function () { return resolve(spanManager.active()); }, 0);
                            });
                        });
                        chai_1.expect(spanManager.active()).to.be.null;
                        _a = chai_1.expect;
                        return [4 /*yield*/, spanPromise];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.equal(span);
                        chai_1.expect(spanManager.active()).to.be.null;
                        return [2 /*return*/];
                }
            });
        }); });
        it('should persist through async/await', function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var spanManager, span, spanPromise, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        spanManager = spanManagerFactory();
                        chai_1.expect(spanManager.active()).to.be.null;
                        span = new opentracing.Span();
                        spanPromise = spanManager.activate(span, function () {
                            chai_1.expect(spanManager.active()).to.equal(span);
                            return (function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, Promise.resolve()];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/, spanManager.active()];
                                    }
                                });
                            }); })();
                        });
                        chai_1.expect(spanManager.active()).to.be.null;
                        _a = chai_1.expect;
                        return [4 /*yield*/, spanPromise];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.equal(span);
                        chai_1.expect(spanManager.active()).to.be.null;
                        return [2 /*return*/];
                }
            });
        }); });
        it('should persist through fs.stat', function () { return __awaiter(_this, void 0, void 0, function () {
            var spanManager, span, spanPromise, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        spanManager = spanManagerFactory();
                        chai_1.expect(spanManager.active()).to.be.null;
                        span = new opentracing.Span();
                        spanPromise = spanManager.activate(span, function () {
                            chai_1.expect(spanManager.active()).to.equal(span);
                            return new Promise(function (resolve) {
                                fs.stat('test', function () { return resolve(spanManager.active()); });
                            });
                        });
                        chai_1.expect(spanManager.active()).to.be.null;
                        _a = chai_1.expect;
                        return [4 /*yield*/, spanPromise];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.equal(span);
                        chai_1.expect(spanManager.active()).to.be.null;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('multiple instances', function () {
        it('should not interfere', function () { return __awaiter(_this, void 0, void 0, function () {
            var spanManager1, spanManager2, span1, span2, _a, spanPromise1, spanPromise2, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        spanManager1 = spanManagerFactory();
                        spanManager2 = spanManagerFactory();
                        chai_1.expect(spanManager1.active()).to.be.null;
                        chai_1.expect(spanManager2.active()).to.be.null;
                        span1 = new opentracing.Span();
                        span2 = new opentracing.Span();
                        _a = spanManager1.activate(span1, function () {
                            chai_1.expect(spanManager1.active()).to.equal(span1);
                            chai_1.expect(spanManager2.active()).to.be.null;
                            return spanManager2.activate(span2, function () {
                                chai_1.expect(spanManager1.active()).to.equal(span1);
                                chai_1.expect(spanManager2.active()).to.equal(span2);
                                return [
                                    new Promise(function (resolve) {
                                        setTimeout(function () { return resolve(spanManager1.active()); }, 0);
                                    }),
                                    new Promise(function (resolve) {
                                        setTimeout(function () { return resolve(spanManager2.active()); }, 0);
                                    })
                                ];
                            });
                        }), spanPromise1 = _a[0], spanPromise2 = _a[1];
                        chai_1.expect(spanManager1.active()).to.be.null;
                        chai_1.expect(spanManager2.active()).to.be.null;
                        _b = chai_1.expect;
                        return [4 /*yield*/, spanPromise1];
                    case 1:
                        _b.apply(void 0, [_d.sent()]).to.equal(span1);
                        _c = chai_1.expect;
                        return [4 /*yield*/, spanPromise2];
                    case 2:
                        _c.apply(void 0, [_d.sent()]).to.equal(span2);
                        chai_1.expect(spanManager1.active()).to.be.null;
                        chai_1.expect(spanManager2.active()).to.be.null;
                        return [2 /*return*/];
                }
            });
        }); });
    });
}
exports.spanManagerTests = spanManagerTests;
function asyncHookManagerTests() {
    var AsyncHookSpanManager = require('../async_hook_span_manager').AsyncHookSpanManager;
    describe('AsyncHookManager', function () {
        spanManagerTests(function () { return new AsyncHookSpanManager(); });
    });
}
exports.asyncHookManagerTests = asyncHookManagerTests;
function asyncWrapSpanManagerTest() {
    var AsyncWrapSpanManager = require('../async_wrap_span_manager').AsyncWrapSpanManager;
    describe('AsyncWrapManager', function () {
        spanManagerTests(function () { return new AsyncWrapSpanManager(); });
    });
}
exports.asyncWrapSpanManagerTest = asyncWrapSpanManagerTest;
function zoneSpanManagerTests() {
    var ZoneSpanManager = require('../zone_span_manager').ZoneSpanManager;
    describe('ZoneSpanManager', function () {
        spanManagerTests(function () { return new ZoneSpanManager(); });
    });
}
exports.zoneSpanManagerTests = zoneSpanManagerTests;
//# sourceMappingURL=span_manager.js.map